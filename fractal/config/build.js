const paths = require('./paths')
const fs = require('fs').promises
const path = require('path')
const preprend = require('prepend-file')
const { copyFile, removeDirFiles, createDirPath, fileExists } = require('./utils')

/**
 * Generates the components-map.json in craft directory
 * and copy all associated files using the manifest file
 * @param {fractal} fractalInstance
 * @param {manifest} manifestObject
 */
async function exportComponents (fractal, manifest) {
  const logger = fractal.cli.console
  /*
    Remap into new object using format:
    @[handle]: [_partials/path/to/twig]
  */
  const remap = {}
  for (const key in manifest) {
    const { target } = manifest[key]
    const importPath = path.relative(paths.craft, target)
    remap[key] = importPath.replace('templates/', '')
  }

  await createDirPath(paths.craft)
  await createDirPath(paths.craftTemplates)

  // Write remap file as components-map.json
  logger.success('Writing components-map.json')
  const dst = path.join(paths.craft, '/components-map.json')
  await fs.writeFile(dst, JSON.stringify(remap, null, 2))

  logger.success('Copying files...')

  // Copy components files
  const copyJobs = []
  for (const key in manifest) {
    const { src, target } = manifest[key]
    copyJobs.push(copyFile(src, target))
  }
  await Promise.all(copyJobs)

  // Prepend warning header
  const prependJobs = []
  for (const key in manifest) {
    const { src, target } = manifest[key]
    const noticePath = path.relative(paths.base, src)
    prependJobs.push(preprend(target, `{#
    This is an autogenerated template from fractal.
    Do not edit this file directly as all changes will be overwritten on each export.
    You can find the source for this template at: /fractal/components//${noticePath} \n#}\n`
    ))
  }
  await Promise.all(prependJobs)
}

/**
 * Deletes all files in the manifest
 * @param {fractalInstance} fractal
 * @param {manifestObject} manifest
 */
async function cleanupExport (fractal) {
  fractal.cli.console.update('Clearing previous export...', 'info')
  if (await fileExists(paths.craftTemplates)) {
    await removeDirFiles(paths.craftTemplates)
  }
  fractal.cli.console.update('Clearing previous export...', 'success')
}

/**
 * Fires the fractal builder so all components get parsed.
 * this step is equivalent to invoking the <fractal build> command.
 * We need this so fractal builds the state at current instance
 * @param {fractalInstance} fractal
 * @returns
 */
async function buildFractal (fractal) {
  const logger = fractal.cli.console
  const builder = fractal.web.builder()
  logger.success('Build Started')

  builder.on('progress', (completed, total) => {
    logger.update(`${completed} of ${total} items`, 'info')
  })
  builder.on('error', err => {
    logger.error(err.message)
  })
  const result = await builder.build()
  return result.errorCount === 0
}

module.exports = {
  buildFractal,
  exportComponents,
  cleanupExport
}
